#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel
  namespace: opentelemetry
spec:
  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.127.0
  env:
  - name: K8S_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: AWS_ACCESS_KEY_ID
    valueFrom:
      secretKeyRef:
        name: otel-creds
        key: aws_access_key_id
  - name: AWS_SECRET_ACCESS_KEY
    valueFrom:
      secretKeyRef:
        name: otel-creds
        key: aws_secret_access_key
  config:
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      zipkin:
        endpoint: 0.0.0.0:9411
      prometheus:
        config:
          global:
            evaluation_interval: 1m
            scrape_interval: 30s
            scrape_timeout: 10s
          scrape_configs:
          - job_name: kubernetes-pods
            honor_labels: true
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 10s
            metrics_path: /metrics
            scheme: http
            follow_redirects: true
            enable_http2: true
            tls_config:
              insecure_skip_verify: true
            relabel_configs:
            - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
              separator: ;
              regex: "true"
              replacement: $$1
              action: keep
            - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
              separator: ;
              regex: "true"
              replacement: $$1
              action: drop
            - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
              separator: ;
              regex: (https?)
              target_label: __scheme__
              replacement: $$1
              action: replace
            - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
              separator: ;
              regex: (.+)
              target_label: __metrics_path__
              replacement: $$1
              action: replace
            - source_labels:
              - __address__
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              separator: ;
              regex: (.+?)(?::\d+)?;(\d+)
              target_label: __address__
              replacement: $$1:$$2
              action: replace
            - separator: ;
              regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$$1
              action: labelmap
            - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_part_of
              separator: ;
              regex: (.*)
              target_label: app_kubernetes_io_part_of
              replacement: $$1
              action: replace
            - source_labels:
              - __meta_kubernetes_namespace
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels:
              - __meta_kubernetes_pod_name
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels:
              - __meta_kubernetes_pod_phase
              separator: ;
              regex: Pending|Succeeded|Failed|Completed
              replacement: $$1
              action: drop
            - regex: __meta_kubernetes_pod_label_app_kubernetes_io_component
              action: labeldrop
            - source_labels:
              - __meta_kubernetes_pod_label_app
              separator: ;
              regex: (.*)
              target_label: app
              replacement: $$1
              action: replace
            kubernetes_sd_configs:
            - role: pod
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
          - job_name: kubernetes-nodes-cadvisor
            kubernetes_sd_configs:
            - role: node
            relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - action: labeldrop
              regex: '^(beta_|vke_|vultr_|topology_|failure_).+'
            - replacement: kubernetes.default.svc:443
              target_label: __address__
            - regex: (.+)
              replacement: /api/v1/nodes/$$1/proxy/metrics/cadvisor
              source_labels:
              - __meta_kubernetes_node_name
              target_label: __metrics_path__
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      tcplog:
        listen_address: 0.0.0.0:1514
    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      batch:
        send_batch_size: 10000
        timeout: 10s
      resource:
        attributes:
        - key: k8s.cluster.name
          value: #@ data.values.cluster
          action: upsert
      attributes:
        actions:
        - key: cluster
          value: #@ data.values.cluster
          action: upsert
      filter:
        #! https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/filterprocessor
        error_mode: ignore
        metrics:
          datapoint:
          - attributes["uri"] == "/livez"
          - attributes["uri"] == "/readyz"
          - attributes["uri"] == "/aboutme"
          - IsMatch(attributes["uri"], ".*/actuator.*")
          - IsMatch(attributes["envoy_cluster_name"], "grafana_.*")
          - IsMatch(attributes["envoy_cluster_name"], "extension_.*")
          - IsMatch(attributes["envoy_cluster_name"], "projectcontour_.*")
        traces:
          span:
          - IsMatch(attributes["upstream_cluster"], "grafana/.*")
          - IsMatch(attributes["upstream_cluster"], "tap-gui/.*")
          - IsMatch(attributes["upstream_cluster"], "raspberrypi/.*")
          - IsMatch(attributes["upstream_cluster"], "zipkin/.*")
          - IsMatch(attributes["http.url"], "https://grafana.*")
          - IsMatch(attributes["http.url"], ".*/v1/logs")
          - IsMatch(attributes["http.url"], ".*://zipkin.*")
          - IsMatch(attributes["http.url"], ".*/livez")
          - IsMatch(attributes["http.url"], ".*/readyz")
          - IsMatch(attributes["http.url"], ".*/aboutme")
          - IsMatch(attributes["http.url"], ".*/actuator.*")
          - IsMatch(attributes["uri"], ".*/actuator.*")
          - IsMatch(attributes["uri"], ".*/livez")
          - IsMatch(attributes["uri"], ".*/readyz")
          - attributes["http.route"] == "/livez"
          - attributes["http.route"] == "/readyz"
          - IsMatch(attributes["url.path"], "/actuator.*")
          - attributes["url.path"] == "/livez"
          - attributes["url.path"] == "/readyz"
          - attributes["user_agent.original"] == "kube-probe//"
          - attributes["user_agent"] == "Knative-Ingress-Probe"
          - IsMatch(attributes["user_agent"], "kube-probe/.*")
          - IsMatch(attributes["user_agent"], "Prometheus/.*")
          - attributes["http.user_agent"] == "kube-probe//"
          - name == "OperationHandler.handle"
          - IsMatch(name, "fs .*")
        logs:
          log_record:
          - IsMatch(resource.attributes["k8s.container.name"], ".*-minecraft") and (severity_text == "DEBUG" or severity_text == "TRACE")
      transform/syslog:
        error_mode: ignore
        log_statements:
        #! https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor#basic-config
        - context: log
          statements:
          - merge_maps(attributes, ExtractGrokPatterns(body, "(?:%{INT:syslog6587.msglen} )?<%{POSINT:syslog.pri}>(%{SPACE})?(?:%{NONNEGINT:syslog5424.ver} )?(?:%{SYSLOGTIMESTAMP:syslog.timestamp}|%{TIMESTAMP_ISO8601:syslog.timestamp}) %{DATA:syslog.hostname} %{DATA:syslog.program}(?:\\[%{POSINT:syslog.pid}\\])?(:)? %{GREEDYDATA:syslog.message}", true), "upsert") where IsString(body)
          - 'merge_maps(attributes, ExtractGrokPatterns(attributes["syslog.message"], "(?:%{DATA:syslog.procid}|\\-) (?:%{DATA:syslog.msgid}|\\-)(?: %{SYSLOG5424SD:syslog.sd}| \\-)? %{GREEDYDATA:syslog.message}", true), "upsert") where attributes["syslog5424.ver"] == "1"'
          - 'merge_maps(attributes, ExtractGrokPatterns(attributes["syslog.sd"], "\\[%{DATA:syslog.sd_id} (?<syslog_sd_params_raw>[^\\]]+)\\]", true), "upsert") where IsString(attributes["syslog.sd"])'
          - merge_maps(resource.attributes, ParseKeyValue(attributes["syslog_sd_params_raw"]), "upsert") where IsString(attributes["syslog_sd_params_raw"])
          - set(attributes["syslog.facility"], Int(attributes["syslog.pri"]) / 8) where IsString(attributes["syslog.pri"])
          - set(attributes["syslog.severity"], Int(attributes["syslog.pri"]) - (attributes["syslog.facility"] * 8)) where IsString(attributes["syslog.pri"])
          - set(severity_text, "FATAL") where attributes["syslog.severity"] == 0
          - set(severity_number, 21) where attributes["syslog.severity"] == 0
          - set(severity_text, "FATAL") where attributes["syslog.severity"] == 1
          - set(severity_number, 21) where attributes["syslog.severity"] == 1
          - set(severity_text, "FATAL") where attributes["syslog.severity"] == 2
          - set(severity_number, 21) where attributes["syslog.severity"] == 2
          - set(severity_text, "ERROR") where attributes["syslog.severity"] == 3
          - set(severity_number, 17) where attributes["syslog.severity"] == 3
          - set(severity_text, "WARN") where attributes["syslog.severity"] == 4
          - set(severity_number, 13) where attributes["syslog.severity"] == 4
          - set(severity_text, "INFO") where attributes["syslog.severity"] == 5
          - set(severity_number, 9) where attributes["syslog.severity"] == 5
          - set(severity_text, "INFO") where attributes["syslog.severity"] == 6
          - set(severity_number, 9) where attributes["syslog.severity"] == 6
          - set(severity_text, "DEBUG") where attributes["syslog.severity"] == 7
          - set(severity_number, 5) where attributes["syslog.severity"] == 7
          - replace_pattern(attributes["syslog.timestamp"], "(.+)([\\+\\-])(\\d+):(\\d+)$", "$$1$$2$$3$$4")
          - set(time, Time(attributes["syslog.timestamp"], "%Y-%m-%dT%H:%M:%S.%sZ")) where IsMatch(attributes["syslog.timestamp"], "^\\d+\\-.+Z$")
          - set(time, Time(attributes["syslog.timestamp"], "%Y-%m-%dT%H:%M:%S.%s%z")) where IsMatch(attributes["syslog.timestamp"], "^\\d+\\-.+\\d$")
          - set(time, Time(attributes["syslog.timestamp"], "%b %d %H:%M:%S")) where IsMatch(attributes["syslog.timestamp"], "^[a-zA-Z]+ .+\\d$")
          - set(body, attributes["syslog.message"])
          - set(resource.attributes["container.image.name"], resource.attributes["container_image"]) where IsString(resource.attributes["container_image"])
          - set(resource.attributes["service.name"], resource.attributes["app_name"]) where IsString(resource.attributes["app_name"])
          - set(resource.attributes["service.name"], resource.attributes["app"]) where IsString(resource.attributes["app"])
          - set(resource.attributes["k8s.node.name"], resource.attributes["node"]) where IsString(resource.attributes["node"])
          - delete_key(attributes, "syslog.message")
          - delete_key(attributes, "syslog.sd")
          - delete_key(attributes, "syslog_sd_params_raw")
          - delete_key(attributes, "syslog.pri")
          - delete_key(attributes, "syslog.severity")
          - delete_key(attributes, "syslog.timestamp")
          - delete_key(attributes, "syslog.procid") where attributes["syslog.procid"] == "-"
          - delete_key(attributes, "syslog.msgid") where attributes["syslog.msgid"] == "-"
          - delete_key(resource.attributes, "container_image")
          - delete_key(resource.attributes, "app_name")
          - delete_key(resource.attributes, "app")
          - delete_key(resource.attributes, "node")
      filter/syslog:
        error_mode: ignore
        logs:
          log_record:
          - attributes["syslog.program"] == "otelcol-contrib"
          - attributes["syslog.program"] == "audisp-syslog"
          - attributes["syslog.program"] == "CRON"
          - attributes["syslog.program"] == "systemd"
    exporters:
      otlphttp/grafana_cloud:
        endpoint: https://otlp-gateway-prod-us-central-0.grafana.net/otlp
        headers:
          authorization: #@ "Basic " + base64.encode(data.values.grafala_cloud_otlp.username + ":" + data.values.grafala_cloud_otlp.password)
        compression: gzip
      otlphttp/lognroll:
        endpoint: https://lognroll.fly.dev
        headers:
          authorization: #@ "Bearer " + data.values.lognroll.token
        compression: gzip
      otlphttp/otlp_sink:
        endpoint: #@ data.values.otlp_sink.endpoint
        headers:
          authorization: #@ "Basic " + base64.encode(data.values.otlp_sink.username + ":" + data.values.otlp_sink.password)
        compression: gzip
      otlphttp/hdx:
        endpoint: https://in-otel.hyperdx.io
        headers:
          authorization: #@ data.values.hyperdx.api_key
        compression: gzip
      otlp/uptrace:
        endpoint: https://otlp.uptrace.dev:4317
        tls:
          insecure: false
        headers:
          uptrace-dsn: #@ data.values.uptrace.uptrace_dsn
        compression: gzip
      otlphttp/zipkin:
        endpoint: #@ data.values.zipkin.endpoint
        compression: gzip
        tls:
          insecure: #@ data.values.zipkin.tls.insecure
      otlphttp/uptrace:
        endpoint: #@ data.values.uptrace_sm.endpoint
        headers:
          uptrace-dsn: #@ data.values.uptrace_sm.uptrace_dsn
        compression: gzip
      otlphttp/betterstack:
        endpoint: #@ data.values.betterstack.endpoint
        headers:
          Authorization: #@ "Bearer " + data.values.betterstack.api_key
        compression: gzip
      prometheusremotewrite:
        endpoint: #@ data.values.prometheus.endpoint
        headers:
          authorization: #@ "Basic " + base64.encode(data.values.prometheus.username + ":" + data.values.prometheus.password)
        tls:
          #! insecure: true
          insecure_skip_verify: true
        compression: snappy
      debug:
        verbosity: detailed
    service:
      pipelines:
        traces:
          receivers:
          - otlp
          - zipkin
          processors:
          - memory_limiter
          - filter
          - resource
          - batch
          exporters:
          - otlphttp/grafana_cloud
          - otlphttp/hdx
          - otlp/uptrace
          - otlphttp/betterstack
        metrics:
          receivers:
          - otlp
          - prometheus
          processors:
          - memory_limiter
          - attributes
          - resource
          - batch
          exporters:
          - prometheusremotewrite
        logs:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - filter
          - resource
          - batch
          exporters:
          - otlphttp/grafana_cloud
          - otlphttp/otlp_sink
          - otlphttp/betterstack
        logs/syslog:
          receivers:
          - tcplog
          processors:
          - memory_limiter
          - resource
          - transform/syslog
          - filter/syslog
          - batch
          exporters:
          - otlphttp/grafana_cloud
          - otlphttp/otlp_sink
          - otlphttp/betterstack