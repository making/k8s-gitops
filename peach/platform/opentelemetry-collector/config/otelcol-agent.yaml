#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-agent
  namespace: opentelemetry
spec:
  mode: daemonset
  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-k8s:0.104.0
  volumes:
  - name: varlog
    hostPath:
      path: /var/log
  volumeMounts:
  - name: varlog
    mountPath: /var/log
    readOnly: true
  config:
    receivers:
      filelog:
        include:
        - /var/log/pods/*/*/*.log
        exclude:
        - /var/log/pods/*/otc-container/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - id: get-format
          routes:
          - expr: body matches "^\\{"
            output: parser-docker
          - expr: body matches "^[^ Z]+ "
            output: parser-crio
          - expr: body matches "^[^ Z]+Z"
            output: parser-containerd
          type: router
        - id: parser-crio
          output: extract_metadata_from_filepath
          regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          timestamp:
            layout: 2006-01-02T15:04:05.999999999Z07:00
            layout_type: gotime
            parse_from: attributes.time
          type: regex_parser
        - id: parser-containerd
          output: extract_metadata_from_filepath
          regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.time
          type: regex_parser
        - id: parser-docker
          output: extract_metadata_from_filepath
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.time
          type: json_parser
        - cache:
            size: 128
          id: extract_metadata_from_filepath
          parse_from: attributes["log.file.path"]
          regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          type: regex_parser
        - from: attributes.log
          to: body
          type: move
        - from: attributes.stream
          to: attributes["log.iostream"]
          type: move
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.restart_count
          to: resource["k8s.container.restart_count"]
          type: move
        - from: attributes.uid
          to: resource["k8s.pod.uid"]
          type: move
        start_at: end
    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      batch:
        send_batch_size: 10000
        timeout: 10s
      resource:
        attributes:
        - key: cluster
          value: #@ data.values.cluster
          action: upsert
      attributes:
        actions:
        - key: cluster
          value: #@ data.values.cluster
          action: upsert
      filter:
        #! https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/filterprocessor
        { }
    exporters:
      otlphttp/grafana_cloud:
        endpoint: https://otlp-gateway-prod-us-central-0.grafana.net/otlp
        headers:
          authorization: #@ "Basic " + base64.encode(data.values.grafala_cloud_otlp.username + ":" + data.values.grafala_cloud_otlp.password)
        compression: gzip
      otlphttp/lognroll:
        endpoint: https://lognroll.fly.dev
        headers:
          authorization: #@ "Bearer " + data.values.lognroll.token
        compression: gzip
      otlp/uptrace:
        endpoint: https://otlp.uptrace.dev:4317
        tls:
          insecure: false
        headers:
          uptrace-dsn: #@ data.values.uptrace.uptrace_dsn
        compression: gzip
      debug:
        verbosity: detailed
    service:
      pipelines:
        logs:
          receivers:
          - filelog
          processors:
          - memory_limiter
          - resource
          - batch
          exporters:
          - debug