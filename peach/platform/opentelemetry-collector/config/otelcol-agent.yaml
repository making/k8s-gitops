#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-agent
  namespace: opentelemetry
spec:
  mode: daemonset
  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.114.0
  env:
  - name: K8S_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  volumes:
  - name: varlog
    hostPath:
      path: /var/log
  volumeMounts:
  - name: varlog
    mountPath: /var/log
    readOnly: true
  config:
    receivers:
      filelog:
        include_file_path: true
        include_file_name: false
        include:
        - /var/log/pods/*/*/*.log
        exclude:
        - /var/log/pods/*/otc-container/*.log
        operators:
        - id: container-parser
          type: container
        - type: json_parser
          if: body matches "^{.*}$"
        - type: regex_parser
          if: attributes.traceparent != nil
          parse_from: attributes.traceparent
          regex: '^[0-9]{2}-(?P<trace_id>[0-9a-z]+)-(?P<span_id>[0-9a-z]+)-(?P<trace_flags>[0-9]{2})$'
        - type: trace_parser
          trace_id:
            parse_from: attributes.trace_id
          span_id:
            parse_from: attributes.span_id
          trace_flags:
            parse_from: attributes.trace_flags
        start_at: end
    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      batch:
        send_batch_size: 10000
        timeout: 10s
      resource:
        attributes:
        - key: k8s.cluster.name
          value: #@ data.values.cluster
          action: upsert
      filter/only-envoy:
        #! https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/filterprocessor
        error_mode: ignore
        logs:
          log_record:
          - resource.attributes["k8s.container.name"] != "envoy"
      filter/selected:
        error_mode: ignore
        logs:
          log_record:
          - resource.attributes["k8s.namespace.name"] == "kube-system"
          - resource.attributes["k8s.namespace.name"] == "openldap"
          - resource.attributes["k8s.namespace.name"] == "raspberrypi"
          - IsMatch(body, ".*(kube-probe|superfluous).*")
      filter/grafana-envoy:
        error_mode: ignore
        logs:
          log_record:
          - IsMatch(attributes["authority"], "grafana.*")
      transform:
        error_mode: ignore
        log_statements:
        #! https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor#parsing-json-logs
        - context: resource
          statements:
          - set(attributes["service.name"], attributes["k8s.container.name"])
        - context: log
          statements:
          - set(severity_text, "INFO")
          - set(instrumentation_scope.name, attributes["upstream_cluster"])
          - set(attributes["host"], attributes["requested_server_name"])
          - set(attributes["status"], attributes["response_code"])
          - set(attributes["remote"], attributes["x_forwarded_for"])
          - delete_key(attributes, "requested_server_name")
          - delete_key(attributes, "response_code")
          - delete_key(attributes, "x_forwarded_for")
          - delete_key(attributes, "log.file.path")
          - delete_key(attributes, "@timestamp")
          - delete_key(attributes, "time")
          - delete_key(attributes, "request_id")
          - delete_key(attributes, "upstream_cluster")
          - delete_key(attributes, "traceparent")
          - delete_key(attributes, "authority")
          - delete_key(attributes, "trace_id")
          - delete_key(attributes, "span_id")
          - delete_key(attributes, "trace_flags")
          - delete_key(resource.attributes, "k8s.pod.uid")
          - delete_key(resource.attributes, "k8s.node.uid")
      resourcedetection:
        detectors:
        - k8snode
    exporters:
      otlphttp/grafana_cloud:
        endpoint: https://otlp-gateway-prod-us-central-0.grafana.net/otlp
        headers:
          authorization: #@ "Basic " + base64.encode(data.values.grafala_cloud_otlp.username + ":" + data.values.grafala_cloud_otlp.password)
        compression: gzip
      otlphttp/lognroll:
        endpoint: https://lognroll.fly.dev
        headers:
          authorization: #@ "Bearer " + data.values.lognroll.token
        compression: gzip
      otlp/uptrace:
        endpoint: https://otlp.uptrace.dev:4317
        tls:
          insecure: false
        headers:
          uptrace-dsn: #@ data.values.uptrace.uptrace_dsn
        compression: gzip
      debug:
        verbosity: detailed
    service:
      pipelines:
        logs:
          receivers:
          - filelog
          processors:
          - filter/selected
          - filter/grafana-envoy
          - memory_limiter
          - resource
          - resourcedetection
          - transform
          - batch
          exporters:
          - otlphttp/grafana_cloud
        logs/only-envoy:
          receivers:
          - filelog
          processors:
          - filter/only-envoy
          - filter/grafana-envoy
          - memory_limiter
          - resource
          - resourcedetection
          - transform
          - batch
          exporters:
          - otlphttp/lognroll