#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel
  namespace: opentelemetry
spec:
  config:
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      zipkin:
        endpoint: 0.0.0.0:9411
      prometheus:
        config:
          global:
            evaluation_interval: 1m
            scrape_interval: 30s
            scrape_timeout: 10s
          scrape_configs:
          - job_name: kubernetes-pods
            honor_labels: true
            honor_timestamps: true
            scrape_interval: 30s
            scrape_timeout: 10s
            metrics_path: /metrics
            scheme: http
            follow_redirects: true
            enable_http2: true
            tls_config:
              insecure_skip_verify: true
            relabel_configs:
            - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
              separator: ;
              regex: "true"
              replacement: $$1
              action: keep
            - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
              separator: ;
              regex: "true"
              replacement: $$1
              action: drop
            - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
              separator: ;
              regex: (https?)
              target_label: __scheme__
              replacement: $$1
              action: replace
            - source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
              separator: ;
              regex: (.+)
              target_label: __metrics_path__
              replacement: $$1
              action: replace
            - source_labels:
              - __address__
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              separator: ;
              regex: (.+?)(?::\d+)?;(\d+)
              target_label: __address__
              replacement: $$1:$$2
              action: replace
            - separator: ;
              regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$$1
              action: labelmap
            - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_part_of
              separator: ;
              regex: (.*)
              target_label: app_kubernetes_io_part_of
              replacement: $$1
              action: replace
            - source_labels:
              - __meta_kubernetes_namespace
              separator: ;
              regex: (.*)
              target_label: namespace
              replacement: $$1
              action: replace
            - source_labels:
              - __meta_kubernetes_pod_name
              separator: ;
              regex: (.*)
              target_label: pod
              replacement: $$1
              action: replace
            - source_labels:
              - __meta_kubernetes_pod_phase
              separator: ;
              regex: Pending|Succeeded|Failed|Completed
              replacement: $$1
              action: drop
            - regex: __meta_kubernetes_pod_label_app_kubernetes_io_component
              action: labeldrop
            - source_labels:
              - __meta_kubernetes_pod_label_app
              separator: ;
              regex: (.*)
              target_label: app
              replacement: $$1
              action: replace
            kubernetes_sd_configs:
            - role: pod
              kubeconfig_file: ""
              follow_redirects: true
              enable_http2: true
          #! - job_name: kubernetes-nodes-cadvisor
          #!   kubernetes_sd_configs:
          #!   - role: node
          #!   relabel_configs:
          #!   - action: labelmap
          #!     regex: __meta_kubernetes_node_label_(.+)
          #!   - replacement: kubernetes.default.svc:443
          #!     target_label: __address__
          #!   - regex: (.+)
          #!     replacement: /api/v1/nodes/$$1/proxy/metrics/cadvisor
          #!     source_labels:
          #!     - __meta_kubernetes_node_name
          #!     target_label: __metrics_path__
          #!   scheme: https
          #!   tls_config:
          #!     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          #!     insecure_skip_verify: true
          #!   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      batch:
        send_batch_size: 10000
        timeout: 10s
      resource:
        attributes:
        - key: cluster
          value: "peach"
          action: upsert
      filter:
        #! https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/filterprocessor
        error_mode: ignore
        traces:
          span:
          - IsMatch(attributes["upstream_cluster"], "grafana/.*")
          - IsMatch(attributes["upstream_cluster"], "tap-gui/.*")
          - IsMatch(attributes["upstream_cluster"], "raspberrypi/.*")
          - IsMatch(attributes["http.url"], "https://grafana.*")
          - IsMatch(attributes["http.url"], ".*://zipkin.*")
          - IsMatch(attributes["http.url"], ".*/livez")
          - IsMatch(attributes["http.url"], ".*/readyz")
          - IsMatch(attributes["http.url"], ".*/aboutme")
          - IsMatch(attributes["http.url"], ".*/actuator.*")
          - attributes["http.route"] == "/livez"
          - attributes["http.route"] == "/readyz"
          - attributes["user_agent.original"] == "kube-probe//"
          - attributes["user_agent"] == "Knative-Ingress-Probe"
          - IsMatch(attributes["user_agent"], "kube-probe/.*")
          - IsMatch(attributes["user_agent"], "Prometheus/.*")
          - attributes["http.user_agent"] == "kube-probe//"
          - name == "OperationHandler.handle"
          - IsMatch(name, "fs .*")
    exporters:
      otlphttp/grafana_cloud:
        endpoint: https://otlp-gateway-prod-us-central-0.grafana.net/otlp
        headers:
          authorization: #@ "Basic " + base64.encode(data.values.grafala_cloud_otlp.username + ":" + data.values.grafala_cloud_otlp.password)
        compression: gzip
      otlphttp/lognroll:
        endpoint: https://lognroll.fly.dev
        headers:
          authorization: #@ "Bearer " + data.values.lognroll.token
        compression: gzip
      otlphttp/hdx:
        endpoint: https://in-otel.hyperdx.io
        headers:
          authorization: #@ data.values.hyperdx.api_key
        compression: gzip
      otlp/uptrace:
        endpoint: https://otlp.uptrace.dev:4317
        tls:
          insecure: false
        headers:
          uptrace-dsn: #@ data.values.uptrace.uptrace_dsn
        compression: gzip
      prometheusremotewrite:
        endpoint: http://inlets-exit.raspberrypi.svc.cluster.local:6868/api/v1/write
        headers:
          authorization: #@ "Basic " + base64.encode(data.values.prometheus.username + ":" + data.values.prometheus.password)
        tls:
          insecure: true
          #! insecure_skip_verify: true
        compression: gzip
      debug:
        verbosity: detailed
    service:
      pipelines:
        traces:
          receivers:
          - otlp
          - zipkin
          processors:
          - memory_limiter
          - filter
          - resource
          - batch
          exporters:
          - otlphttp/grafana_cloud
          - otlphttp/hdx
          - otlp/uptrace
        metrics:
          receivers:
          - otlp
          - prometheus
          processors:
          - batch
          - resource
          exporters:
          - prometheusremotewrite
        logs:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - resource
          - batch
          exporters:
          - otlphttp/lognroll